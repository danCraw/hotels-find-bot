from aiogram import types
from aiogram.dispatcher import FSMContext

from app.create_bot import dp
from app.keyboards.common import cancel_kb, location_kb
from app.models.city import City, Point
from app.services.geocoding.osm import (
    openrouteservice_city_geocoding,
    openrouteservice_reverse_geocoding,
)
from .sessions import FSMClient
from ..services.geocoding.db import db_reverse_geocoding, db_city_geocoding
from ..services.geocoding.yandex import yandex_reverse_geocoding, yandex_city_geocoding


@dp.message_handler(regexp="–ù–∞—á–∞—Ç—å", state=None)
@dp.message_handler(regexp="/start", state=None)
async def user_loc(message: types.Message):
    """Start conversation with user"""
    markup = location_kb()
    await FSMClient.next()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è "
        '–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ". '
        '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" ',
        reply_markup=markup,
    )


@dp.message_handler(state=FSMClient.point, content_types=["location"])
async def handle_location(message: types.Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude
    point = Point(lat=lat, lon=lon)

    city_name = None
    try:
        city_name = yandex_reverse_geocoding(lon, lat)
    except Exception:
        try:
            city_name = openrouteservice_reverse_geocoding(point)
        except Exception:
            city_name = db_reverse_geocoding(point)

    if not city_name:
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é."
        )
        return

    async with state.proxy() as data:
        data["city"] = City(name=city_name, point=point)

    await FSMClient.target_city.set()
    await message.answer("üìç –ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=cancel_kb())


@dp.message_handler(lambda msg: not msg.text.startswith("/"), state=FSMClient.point)
async def send_city(message: types.Message, state: FSMContext) -> None:
    city_name = message.text.strip()
    point = None

    try:
        point = yandex_city_geocoding(city_name)
    except Exception:
        try:
            point = openrouteservice_city_geocoding(city_name)
        except Exception:
            point = db_city_geocoding(city_name)

    if not point:
        await message.answer(
            "‚ùóÔ∏è–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    async with state.proxy() as data:
        data["city"] = City(name=city_name, point=point)

    await FSMClient.target_city.set()
    await message.answer("üìç –ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –í—ã –µ–¥–µ—Ç–µ")
