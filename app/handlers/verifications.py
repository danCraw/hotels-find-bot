import random
import time

from aiogram import types
from aiogram.dispatcher import FSMContext

from app.create_bot import dp
from app.handlers.booking import create_payment_link
from app.handlers.sessions import FSMClient
from app.services.verifications import send_email_code, send_sms_code



@dp.message_handler(state=FSMClient.verifying_codes)
async def verify_codes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if int(time.time()) > data['codes_expire']:
            await message.answer("‚åõ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–µ.")
            return

        data['attempts_left'] -= 1
        if data['attempts_left'] < 0:
            await message.answer("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return

        try:
            input_data = {k.strip().lower(): v.strip()
                          for k, v in (line.split(':', 1)
                                       for line in message.text.split('\n'))}

            email_match = input_data.get('email') == data['booking_email_code']
            phone_match = input_data.get('—Ç–µ–ª–µ—Ñ–æ–Ω') == data['booking_phone_code']

            if email_match and phone_match:
                await message.answer("‚úÖ –ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ ")
                await state.finish()
            else:
                error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–¥—ã:\n"
                if not email_match:
                    error_msg += "‚Ä¢ Email –∫–æ–¥\n"
                if not phone_match:
                    error_msg += "‚Ä¢ SMS –∫–æ–¥\n"

                await message.answer(
                    f"{error_msg}\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {data['attempts_left']}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–¥—ã."
                )
        except Exception as e:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\nEmail: 123456\n–¢–µ–ª–µ—Ñ–æ–Ω: 654321")

    await create_payment_link(message, data)


@dp.message_handler(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ", state=FSMClient.verifying_codes)
async def resend_verification_codes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_time = int(time.time())
        last_resend = data.get('last_resend_time', 0)

        if current_time - last_resend < 30:
            remaining = 30 - (current_time - last_resend)
            await message.answer(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫—É–Ω–¥")
            return

        try:
            new_email_code = str(random.randint(100000, 999999))
            new_phone_code = str(random.randint(100000, 999999))
            new_expire_time = current_time + 300  # +5 –º–∏–Ω—É—Ç

            await send_email_code(data['email'], new_email_code)
            await send_sms_code(data['phone'], new_phone_code)

            data.update({
                'booking_email_code': new_email_code,
                'booking_phone_code': new_phone_code,
                'codes_expire': new_expire_time,
                'last_resend_time': current_time
            })

            await message.answer("‚úÖ –ù–æ–≤—ã–µ –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ SMS.")

        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
