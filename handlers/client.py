import asyncio
import random
import re
import time
from datetime import datetime

import aiohttp
from aiogram import types, Dispatcher
from aiogram.utils.callback_data import CallbackData

from create_bot import bot, dp
from aiogram.types import KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from keyboards import kb_client
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
import aiogram.utils.markdown as md
from calculations import *
from time import sleep

from models.city import City
from models.hotel import Hotel
from models.point import Point
from verification import send_email_code, send_sms_code

class BookingStates(StatesGroup):
    GET_EMAIL = State()
    GET_PHONE = State()
    GET_GUEST_COUNT = State()
    GET_GUEST_DATA = State()
    VERIFYING_CODES = State()
    send_payment_msg = State()

''' START '''
@dp.message_handler(commands=['start', 'help'])
async def start_command(message: types.Message):
    """Send welcome message to user"""
    await bot.send_message(message.from_user.id,
                           '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –≤ –¥–æ—Ä–æ–≥–µ. –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é: —Å–ø—Ä–∞—à–∏–≤–∞—é —É –í–∞—Å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, '
                           '–ø–æ—Ç–æ–º –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –µ–¥–µ—Ç–µ, –∑–∞—Ç–µ–º –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å '
                           '–æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–µ–ª–µ, —è —Å–æ—Å—Ç–∞–≤–ª—é –º–∞—Ä—à—Ä—É—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã –æ–∫–∞–∂–µ—Ç–µ—Å—å.',
                           reply_markup=kb_client)

''' INFO '''
@dp.message_handler(commands=['info'])
async def get_info(message: types.Message):
    """Send info about bot"""
    await bot.send_message(message.from_user.id, md.text(
        md.text("–í—Å—ë, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã —è –Ω–∞—à–µ–ª –ª—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –¥–ª—è –í–∞—Å:"),
        md.text("* –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é (–¥–æ—Å—Ç—É–ø–Ω–æ —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)"),
        md.text("* –¥–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"),
        md.text("* –∏ –∑–∞—Ç–µ–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤ –æ—Ç–µ–ª–µ"),
        sep='\n',
    ))

''' USER LOCATION '''
class FSMClient(StatesGroup):
    point = State()
    destination_city = State()
    travel_time = State()
    client_info = State()
    verifying_codes = State()


@dp.message_handler(regexp='–ù–∞—á–∞—Ç—å', state=None)
@dp.message_handler(regexp='/start', state=None)
async def user_loc(message: types.Message):
    """Start conversation with user"""
    await FSMClient.point.set()
    b_location = KeyboardButton('–õ–æ–∫–∞—Ü–∏—è', request_location=True)
    b_cancel = KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(b_location, b_cancel)

    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è '
                         '–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–õ–æ–∫–∞—Ü–∏—è". '
                         '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" ', reply_markup=markup)

@dp.message_handler(state='*', commands='–û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    """Cancel current state and return to the previous one"""
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–∞')

@dp.message_handler(state=FSMClient.point)
async def send_city(message: types.Message, state: FSMContext) -> None:
    """Send city to user"""
    async with state.proxy() as data:
        from_coords = yandex_city_geocoding(message.text)
        data['city'] = City(name=message.text, point=from_coords)
    await FSMClient.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –í—ã –µ–¥–µ—Ç–µ')

@dp.message_handler(state=FSMClient.point, content_types=['location'])
async def user_location(message: types.Message, state: FSMContext):
    """Get user location and send it to user"""
    lat = message.location.latitude
    lon = message.location.longitude
    city_name = yandex_reverse_geocoding(lon=lon, lat=lat)

    async with state.proxy() as data:
        city_point = Point(lat=lat, lon=lon)
        data['city'] = City(name=city_name, point=city_point)

    await FSMClient.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –í—ã –µ–¥–µ—Ç–µ')


@dp.message_handler(state=FSMClient.destination_city)
async def send_path_data(message: types.Message, state: FSMContext):
    """Send path data to user"""
    async with state.proxy() as data:
        city: City = data.get('city')
        if not city:
            await message.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.')
            return

        city_name = city.name
        from_coords: Point = city.point
        to_city = message.text
        to_coords: Point = yandex_city_geocoding(to_city)

        if not to_coords:
            await message.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.')
            return

        route_data = build_route(from_coords.lat, from_coords.lon, to_coords.lat, to_coords.lon)

        if not route_data:
            await message.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç.')
            return

        data['path_data'] = route_data

        time_h_duration = route_data['duration'] // 3600
        time_m_duration = int((route_data['duration'] % 3600) / 60)
        full_length = round(route_data['length'] / 1000, 3)

        await FSMClient.next()
        await bot.send_message(message.from_user.id, md.text(
            md.text("–í–∞—à –º–∞—Ä—à—Ä—É—Ç:"),
            md.text(f"–∏–∑: {city_name}"),
            md.text(f"–≤: {to_city}"),
            md.text(f"–ø—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å—é: {full_length} –∫–º,"),
            md.text(f"–∑–∞–Ω–∏–º–∞–µ—Ç: {time_h_duration} —á. {time_m_duration} –º–∏–Ω."),
            sep='\n'
        ))
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö:"
        )
        await Filters.waiting_for_adults.set()


class Filters(StatesGroup):
    waiting_for_adults = State()
    waiting_for_children = State()
    waiting_for_children_age = State()
    days_of_stay = State()
    client_info = State()
    booking_data = State()

booking_callback = CallbackData("book", "offer_id")

@dp.message_handler(state=FSMClient.travel_time)
async def send_travel_time(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        original_travel_time = time_from_text_to_seconds(message.text)
        if original_travel_time == 0:
            await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ...')
            return

        travel_time = original_travel_time
        found = False
        confirmed_hotels = []
        hotel_rooms_map = {}

        while travel_time >= 0:
            arrival_date = str(datetime.fromtimestamp(message.date.timestamp() + travel_time).date())
            departure_date = str(
                datetime.fromtimestamp(message.date.timestamp() + travel_time + (86400 * data['days_of_stay'])).date())

            point = find_coordinates_by_time(travel_time, data['path_data'])
            hotels = find_hotels_by_coordinates(point)

            adults = data.get('adults')
            children_age = data.get('children_age')
            confirmed_hotels.clear()

            for hotel in hotels:
                hotels_rooms = await get_hotel_rooms(
                    hotel.ya_id,
                    arrival_date,
                    departure_date,
                    adults,
                    children_age
                )

                if hotels_rooms:
                    hotel.rooms = len(hotels_rooms)
                    hotel_rooms_map[hotel.ya_id] = hotels_rooms
                    confirmed_hotels.append(hotel)
                    found = True

            if found:
                break
            else:
                travel_time -= 1800

        if not found:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ç–µ–ª–∏.")
            return

        data['travel_time'] = travel_time
        data['confirmed_hotels'] = confirmed_hotels
        data['hotel_rooms_map'] = hotel_rooms_map

        await message.reply("–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–∞—à–µ–ª", reply_markup=kb_client)

        for hotel in confirmed_hotels:

            url = hotel.url if hotel.url else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            await message.answer(
                f"üè® *{hotel.name}*\n"
                f"üìç –ê–¥—Ä–µ—Å: {hotel.address}\n"
                f"üåê –°–∞–π—Ç: {url}\n"
                f"üõè –°–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {hotel.rooms}",
                parse_mode="Markdown"
            )

            rooms = hotel_rooms_map.get(hotel.ya_id, [])

            for room in rooms:
                price = room['offers'][0]['price']['value'] if room.get('offers') else "?"
                cancellation = room['offers'][0]['cancellation']['refund_type'] if room.get('offers') else "?"
                offer_id = room['offers'][0]['id'] if room.get('offers') else None

                keyboard = InlineKeyboardMarkup()
                if offer_id:
                    callback_data = booking_callback.new(
                        offer_id=offer_id,
                    )
                    keyboard.add(InlineKeyboardButton(
                        "üõé –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=callback_data
                    ))

                message_text = (
                    f"üîπ *{room.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n"
                    f"üíµ –¶–µ–Ω–∞: {price} RUB\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {room.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                    f"üö™ –û—Ç–º–µ–Ω–∞: {cancellation_map.get(cancellation)}"
                )

                await message.answer(
                    message_text,
                    reply_markup=keyboard
                )
                await asyncio.sleep(0.5)


@dp.callback_query_handler(booking_callback.filter(), state="*")
async def handle_booking_button(callback: types.CallbackQuery, state: FSMContext):
    _, offer_id = callback.data.split(':')

    async with state.proxy() as data:
        data['offer_id'] = offer_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    instruction = (
        "üìù *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:*\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +79123456789\n"
        "Email: example@mail.com\n"
        "1. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
        "2. –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞\n"
        "3. –ü—ë—Ç—Ä –ò–≤–∞–Ω–æ–≤ (—Ä–µ–±—ë–Ω–æ–∫ 5 –ª–µ—Ç)\n\n"
        "_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ—Ä—è–¥–æ–∫ –¥–∞–Ω–Ω—ã—Ö_"
    )

    await callback.message.answer(instruction, parse_mode="Markdown")
    await callback.answer()

    await FSMClient.client_info.set()


async def create_payment_link(message, data):
    offer = await get_hotel_booking_offer(data['offer_id'])

    booking_token = offer["booking_token"]

    try:
        async with aiohttp.ClientSession() as session:
            order_data = await create_hotel_booking_order(
                booking_token,
                data['email'],
                data['phone'],
                data['guests']
            )

            order_id = order_data['order_id']

            status_data = await get_hotel_booking_status(order_id)

            payment_link = status_data.get('payment_url')

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                url=payment_link
            ))

            await message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=keyboard
            )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.callback_query_handler(Text(startswith="book:"))
async def start_booking(callback: types.CallbackQuery, state: FSMContext):
    _, offer_id = callback.data.split(':')

    async with state.proxy() as data:
        data['offer_id'] = offer_id

    data = await state.get_data()

    offer = await get_hotel_booking_offer(data['offer_id'])

    booking_token = offer["booking_token"]

    try:
        async with aiohttp.ClientSession() as session:
            order_data = await create_hotel_booking_order(
                booking_token,
                data['email'],
                data['phone'],
                data['guests']
            )

            order_id = order_data['order_id']

            status_data = await get_hotel_booking_status(order_id)

            payment_link = status_data.get('payment_url')

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                url=payment_link
            ))

            await callback.message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=keyboard
            )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    await state.finish()


@dp.message_handler(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ", state=FSMClient.verifying_codes)
async def resend_verification_codes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_time = int(time.time())
        last_resend = data.get('last_resend_time', 0)

        if current_time - last_resend < 30:
            remaining = 30 - (current_time - last_resend)
            await message.answer(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫—É–Ω–¥")
            return

        try:
            new_email_code = str(random.randint(100000, 999999))
            new_phone_code = str(random.randint(100000, 999999))
            new_expire_time = current_time + 300  # +5 –º–∏–Ω—É—Ç

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–¥—ã
            await send_email_code(data['email'], new_email_code)
            await send_sms_code(data['phone'], new_phone_code)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            data.update({
                'booking_email_code': new_email_code,
                'booking_phone_code': new_phone_code,
                'codes_expire': new_expire_time,
                'last_resend_time': current_time  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            })

            await message.answer("‚úÖ –ù–æ–≤—ã–µ –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ SMS.")

        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(state=FSMClient.client_info)
async def process_client_info(message: types.Message, state: FSMContext):
    booking_info = {
        'phone': None,
        'email': None,
        'guests': []
    }

    try:
        data = message.text.split('\n')

        for line in data:
            line = line.strip().lower()
            if line.startswith('—Ç–µ–ª–µ—Ñ–æ–Ω:'):
                booking_info['phone'] = line.split(':', 1)[1].strip()
            elif line.startswith('email:'):
                booking_info['email'] = line.split(':', 1)[1].strip()
            elif line[0].isdigit() and line[1] in '. )':
                guest = line.split('.', 1)[1].strip()
                booking_info['guests'].append(guest)

        if not booking_info['phone'] or not booking_info['email'] or not booking_info['guests']:
            raise ValueError

    except Exception as e:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                             "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +79123456789\n"
                             "e-mail: example@mail.com\n"
                             "1. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
                             "2. –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞\n"
                             "3. –ü—ë—Ç—Ä –ò–≤–∞–Ω–æ–≤ —Ä–µ–±—ë–Ω–æ–∫ 5 –ª–µ—Ç")

    if not re.match(r'^\+?[1-9]\d{7,14}$', booking_info['phone']):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return

    if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', booking_info['email']):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
        return

    email_code = str(random.randint(100000, 999999))
    phone_code = str(random.randint(100000, 999999))
    codes_expire = int(time.time()) + 300

    try:
        await send_email_code(booking_info['email'], email_code)
        await send_sms_code(booking_info['phone'], phone_code)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async with state.proxy() as data:
        data.update({
            'booking_email_code': email_code,
            'booking_phone_code': phone_code,
            'codes_expire': codes_expire,
            'attempts_left': 3  # –õ–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        })

    await message.answer(
        "üì¨ –ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "Email: 123456\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: 654321",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        )
    )

    async with state.proxy() as data:
        data.update({
            "phone": booking_info['phone'],
            "email": booking_info['email'],
            "guests": booking_info['guests'],
        })

    await FSMClient.verifying_codes.set()


@dp.message_handler(state=FSMClient.verifying_codes)
async def verify_codes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if int(time.time()) > data['codes_expire']:
            await message.answer("‚åõ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–µ.")
            return

        data['attempts_left'] -= 1
        if data['attempts_left'] < 0:
            await message.answer("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return

        try:
            input_data = {k.strip().lower(): v.strip()
                          for k, v in (line.split(':', 1)
                                       for line in message.text.split('\n'))}

            email_match = input_data.get('email') == data['booking_email_code']
            phone_match = input_data.get('—Ç–µ–ª–µ—Ñ–æ–Ω') == data['booking_phone_code']

            if email_match and phone_match:
                await message.answer("‚úÖ –ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ ")
                await state.finish()
            else:
                error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–¥—ã:\n"
                if not email_match:
                    error_msg += "‚Ä¢ Email –∫–æ–¥\n"
                if not phone_match:
                    error_msg += "‚Ä¢ SMS –∫–æ–¥\n"

                await message.answer(
                    f"{error_msg}\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {data['attempts_left']}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–¥—ã."
                )
        except Exception as e:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\nEmail: 123456\n–¢–µ–ª–µ—Ñ–æ–Ω: 654321")

    await create_payment_link(message, data)


@dp.message_handler(state=Filters.waiting_for_adults)
async def process_adults_input(message: types.Message, state: FSMContext):
    try:
        adults = int(message.text)
        if adults <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if adults > 20:
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö. –ú–∞–∫—Å–∏–º—É–º 20. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(adults=adults)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:")
        await Filters.waiting_for_children.set()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message_handler(state=Filters.waiting_for_children)
async def process_children_input(message: types.Message, state: FSMContext):
    try:
        children = int(message.text)
        if children < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if children > 10:
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π. –ú–∞–∫—Å–∏–º—É–º 10. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(children=children)
        user_data = await state.get_data()

        if children > 0:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ {children} –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 8):")
            await Filters.waiting_for_children_age.set()
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤ –æ—Ç–µ–ª–µ?")
            await Filters.days_of_stay.set()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–µ—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0, 1, 2). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message_handler(state=Filters.waiting_for_children_age)
async def process_children_age_input(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        children_count = user_data.get('children', 0)

        ages = [age.strip() for age in message.text.split(',')]

        if len(ages) != children_count:
            await message.answer(
                f"–í—ã —É–∫–∞–∑–∞–ª–∏ {len(ages)} –≤–æ–∑—Ä–∞—Å—Ç–æ–≤, –Ω–æ –¥–µ—Ç–µ–π {children_count}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ {children_count} –≤–æ–∑—Ä–∞—Å—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
            return

        valid_ages = []
        for age in ages:
            try:
                age_int = int(age)
                if age_int <= 0:
                    await message.answer(
                        f"–í–æ–∑—Ä–∞—Å—Ç '{age}' –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç—ã —Å–Ω–æ–≤–∞:")
                    return
                if age_int > 17:
                    await message.answer(
                        f"–í–æ–∑—Ä–∞—Å—Ç '{age}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ - 17 –ª–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç—ã —Å–Ω–æ–≤–∞:")
                    return
                valid_ages.append(age_int)
            except ValueError:
                await message.answer(
                    f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç '{age}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 8):")
                return

        await state.update_data(children_age=valid_ages)
        await message.answer("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤ –æ—Ç–µ–ª–µ?")
        await Filters.days_of_stay.set()

    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç—ã –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –µ—â–µ —Ä–∞–∑:")


@dp.message_handler(state=Filters.days_of_stay)
async def process_days_of_stay(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)

        if days <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        if days > 100:
            await message.answer(
                "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        if days < 1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è - 1 –¥–µ–Ω—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(days_of_stay=days)

        await message.answer(
            '–î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —á–∞—Å–∞—Ö –∏–ª–∏ –º–∏–Ω—É—Ç–∞—Ö), —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤ '
            '–æ—Ç–µ–ª–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: "3 —á–∞—Å–∞" –∏–ª–∏ "56 –º–∏–Ω—É—Ç" –∏–ª–∏ "5 —á–∞—Å–æ–≤ 42 –º–∏–Ω—É—Ç—ã".\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ —Å–ª–æ–≤–∞ "—á–∞—Å/—á–∞—Å–æ–≤/—á–∞—Å–∞" –∏ "–º–∏–Ω—É—Ç–∞/–º–∏–Ω—É—Ç/–º–∏–Ω—É—Ç—ã".'
        )
        await FSMClient.travel_time.set()

    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 3, 7, 14 –∏ —Ç.–¥.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

def client_handler_register(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start', 'help'])
    dp.register_message_handler(get_info, commands=['info'])
    dp.register_message_handler(user_location, content_types=['location'])
