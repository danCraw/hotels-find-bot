import pytest
from unittest.mock import AsyncMock, patch
from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from datetime import datetime

from app.handlers.client_info import process_client_info
from app.handlers.sessions import FSMClient

FSMClient.verifying_codes = AsyncMock()


@pytest.fixture
def message():
    msg = AsyncMock(spec=Message)
    msg.from_user.id = 123
    msg.date = datetime.now()
    return msg


@pytest.fixture
def state():
    mock_state = AsyncMock(spec=FSMContext)
    data = {}
    proxy = AsyncMock()
    proxy.__aenter__.return_value = data
    proxy.__aexit__.return_value = None
    mock_state.proxy = lambda: proxy
    return mock_state


@pytest.mark.asyncio
@patch("app.handlers.client_info.send_email_code", new_callable=AsyncMock)
@patch("app.handlers.client_info.send_sms_code", new_callable=AsyncMock)
async def test_process_client_info_success(mock_sms, mock_email, message, state):
    message.text = (
        "–¢–µ–ª–µ—Ñ–æ–Ω: +79123456789\n"
        "Email: test@example.com\n"
        "1. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
        "2. –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞"
    )

    await process_client_info(message, state)

    mock_email.assert_called_once()
    mock_sms.assert_called_once()
    message.answer.assert_any_call(
        "üì¨ –ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "Email: 123456\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: 654321",
        reply_markup=message.answer.call_args_list[-1][1]["reply_markup"]
    )


@pytest.mark.asyncio
async def test_process_client_info_invalid_phone(message, state):
    message.text = (
        "–¢–µ–ª–µ—Ñ–æ–Ω: 12345\n"
        "Email: test@example.com\n"
        "1. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    )

    await process_client_info(message, state)
    message.answer.assert_called_with("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@pytest.mark.asyncio
async def test_process_client_info_invalid_email(message, state):
    message.text = (
        "–¢–µ–ª–µ—Ñ–æ–Ω: +79123456789\n"
        "Email: wrong_email\n"
        "1. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    )

    await process_client_info(message, state)
    message.answer.assert_called_with("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")


@pytest.mark.asyncio
async def test_process_client_info_missing_fields(message, state):
    message.text = "–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

    await process_client_info(message, state)
    message.answer.assert_any_call("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                                   "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +79123456789\n"
                                   "e-mail: example@mail.com\n"
                                   "1. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
                                   "2. –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞\n"
                                   "3. –ü—ë—Ç—Ä –ò–≤–∞–Ω–æ–≤ —Ä–µ–±—ë–Ω–æ–∫ 5 –ª–µ—Ç")


@pytest.mark.asyncio
@patch("app.handlers.client_info.send_email_code", new_callable=AsyncMock, side_effect=Exception("fail"))
@patch("app.handlers.client_info.send_sms_code", new_callable=AsyncMock)
async def test_process_client_info_send_error(mock_sms, mock_email, message, state):
    message.text = (
        "–¢–µ–ª–µ—Ñ–æ–Ω: +79123456789\n"
        "Email: test@example.com\n"
        "1. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    )

    await process_client_info(message, state)

    message.answer.assert_any_call("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
